# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.cpp':
  'ACM Template':
    'prefix': 'my_template'
    'body': '''
    #include <iostream> // C++ I/O
    #include <string>   // C++ string
    #include <fstream>  // File I/O
    #include <sstream>  // String stream I/O
    #include <iomanip>  // C++ I/O manipulator

    #include <cstdlib> // C library
    #include <cstdio>  // C I/O
    #include <ctime>   // C time
    #include <cmath>   // Math library
    #include <cstring> // C strings

    #include <vector>    // Vector
    #include <queue>     // Queue
    #include <stack>     // Stack
    #include <map>       // Map
    #include <set>       // Set
    #include <bitset>    // Bitset
    #include <algorithm> // Algorithms

    using namespace std;

    #define INF 0x3f3f3f3f
    #define EPS 1e-8

    typedef long long ll;
    typedef unsigned long long ull;

    #define memclr(_var) memset(_var, 0, sizeof(_var))
    #define maximize(_var, _cur) _var = max(_var, _cur)
    #define minimize(_var, _cur) _var = min(_var, _cur)
    #define reps(_var, _begin, _end, _step) for (int _var = (_begin); _var <= (_end); _var += (_step))
    #define reps_(_var, _end, _begin, _step) for (int _var = (_end); _var >= (_begin); _var -= (_step))
    #define rep(_var, _begin, _end) reps(_var, _begin, _end, 1)
    #define rep_(_var, _end, _begin) reps_(_var, _end, _begin, 1)

    int read()
    {
        char ch = getchar();
        int x = 0, f = 1;
        while (ch < '0' || ch > '9')
        {
            if (ch == '-')
                f = -1;
            ch = getchar();
        }
        while (ch >= '0' && ch <= '9')
            x = x * 10 + ch - '0', ch = getchar();
        return x * f;
    }

    int main(int argc, char *argv[])
    {
        ios::sync_with_stdio(false);
        cin.tie(0);



        return 0;
    }
    '''
